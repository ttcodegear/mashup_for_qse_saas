using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

//dotnet add package JWT --version 9.0.3
using JWT.Algorithms;
using JWT.Builder;
using System.Security.Cryptography.X509Certificates;

namespace aspnettest
{
    public class Startup
    {
        // This method gets called by the runtime. Use this method to add services to the container.
        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940
        public void ConfigureServices(IServiceCollection services)
        {
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseRouting();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapGet("/", async context =>
                {
                   X509Certificate2 cert = new X509Certificate2("C:\\temp\\cert.pfx");
                   var rs256 = new RS256Algorithm(cert.GetRSAPublicKey(), cert.GetRSAPrivateKey());
                   var iat = DateTimeOffset.UtcNow;
                   var exp = iat.AddHours(1); //Expires 3600 seconds after the issue date/time.
                   // kid and iss have to match with the IDP config and the audience has to be qlik.api/login/jwt-session
                   var token = new JwtBuilder()
                     .WithAlgorithm(rs256)
                     .AddHeader("kid", "my-custom-jwt")
                     .AddClaim("jti", Guid.NewGuid().ToString())
                     .AddClaim("iss", "https://my-custom-jwt")
                     .AddClaim("iat", iat.ToUnixTimeSeconds())
                     .AddClaim("exp", exp.ToUnixTimeSeconds())
                     .AddClaim("nbf", iat.ToUnixTimeSeconds()) //JWT is valid 0 second after the issue date/time.
                     .AddClaim("sub", "0hEhiPyhMBdtOCv2UZKoLo4G24p-7R6eeGdZUQHF0-c")
                     .AddClaim("subType", "user")
                     .AddClaim("name", "Hardcore Harry")
                     .AddClaim("email", "harry@example.com")
                     .AddClaim("email_verified", true)
                     .AddClaim("groups", new string[] { "Administrators", "Sales", "Marketing" })
                     .AddClaim("aud", "qlik.api/login/jwt-session")
                     .Encode();

                    var html = @"
<html>
<head>
  <meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8""/>
  <script src=""https://tts.sg.qlikcloud.com/resources/assets/external/requirejs/require.js""></script>
  <link rel=""stylesheet"" href=""https://tts.sg.qlikcloud.com/resources/autogenerated/qlik-styles.css"">

<script>
//Qlik Sense SaaSのテナント情報
var server = {
  host: ""tts.sg.qlikcloud.com"", // Qlik Sense SaaS tenant
  port: 443,                    // Qlik Sense SaaS port
  prefix: ""/"",                  // Virtual Proxy prefix
  isSecure: true,               // true=https, false=http
  webIntegrationId: 'TnClSNKbs_QqoZa31Qwy1qD5U1CotVfF', // Web ID
  jwt: '{jwttoken}'             // JWT
};

//認証済みかのチェック
function connect() {
  var tenant = ""https://""+server.host+(server.port ? "":""+server.port : """");
  //ログイン状態チェック用API: https://[tenant]/api/v1/users/me
  fetch(tenant + ""/api/v1/users/me"", {
    method: ""GET"",
    mode: ""cors"",           // no-cors, cors, same-origin
    credentials: ""include"", // include, same-origin, omit
    headers: {
      ""qlik-web-integration-id"": server.webIntegrationId
    }
  }).then(response => {
    //未認証の場合はJWTで認証
    if(response.status===401) {
      fetch(tenant + ""/login/jwt-session"", {
        method: 'POST',
        mode: 'cors',
        credentials: 'include',
        headers: {
          'qlik-web-integration-id': server.webIntegrationId,
          'Authorization':'Bearer '+server.jwt
        },
      }).then((response) => {
        if(response.status !== 200) {
          alert('Failed to login via JWT');
        }
        else {
          start();
        }
      });
    }
    else {
      start();
    }
  }).catch(error => {
    alert(error);
  });
}
connect(); //認証済みかのチェック

function start() {
require.config({
  // https://tts.sg.qlikcloud.com/resources
  baseUrl: ""https://"" + server.host + (server.port ? "":"" + server.port : """") + server.prefix + ""resources"",
  webIntegrationId: server.webIntegrationId
});
require([""js/qlik""], function(qlik) {
  qlik.setLanguage('ja-JP');                           // 表示言語
  qlik.theme.apply('breeze');                          // Theme ID
  var app_id = '72a3da4b-1093-4c4c-840d-1ee44fbcbb91'; // App ID
  var app = qlik.openApp(app_id, server);
  app.getObject('QV01', 'CurrentSelections'); // 選択バー
  app.getObject('QV02', 'BDQru');             // フィルターパネル
  app.getObject('QV03', 'CzcvAzC');           // フィルターパネル
  app.getObject('QV04', 'pmGDmg');            // 棒チャート

  window.onbeforeunload = function() {
    app.close();
  }
});
}
</script>

</head>

<body>

<table border=""1"" width=""100%"" height=""100%"">
  <tbody>
    <tr>
      <td colspan=""3"" width=""100%"" height=""10%""><div id=""QV01"" style=""width:100%;height:100%;""></div></td>
    </tr>
    <tr>
      <td width=""30%"" height=""45%""><div id=""QV02"" style=""width:100%;height:100%;""></div></td>
      <td colspan=""2"" rowspan=""2"" width=""70%"" height=""80%""><div id=""QV04"" style=""width:100%;height:100%;""></div></td>
    </tr>
    <tr>
      <td width=""30%"" height=""45%""><div id=""QV03"" style=""width:100%;height:100%;""></div></td>
    </tr>
  </tbody>
</table>

<script>
</script>

</body>
</html>
";
                    await context.Response.WriteAsync(html.Replace("{jwttoken}", token));
                });
            });
        }
    }
}
