package mashup_jwt;

import java.io.*;
import java.net.*;
import java.util.*;
import java.nio.charset.*;
import java.nio.file.*;
import com.sun.net.httpserver.*;

import java.security.*;
import java.security.interfaces.*;
import java.security.spec.*;

//https://repo1.maven.org/maven2/com/auth0/java-jwt/4.0.0/java-jwt-4.0.0.jar
//https://repo1.maven.org/maven2/com/fasterxml/jackson/core/jackson-core/2.13.3/jackson-core-2.13.3.jar
//https://repo1.maven.org/maven2/com/fasterxml/jackson/core/jackson-databind/2.13.3/jackson-databind-2.13.3.jar
//https://repo1.maven.org/maven2/com/fasterxml/jackson/core/jackson-annotations/2.13.3/jackson-annotations-2.13.3.jar
import com.auth0.jwt.JWT;
import com.auth0.jwt.algorithms.Algorithm;

public class MashupJWT {
  private static class MyHandler implements HttpHandler {
    private final String template = "<html>\n<head>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n  <script src=\"https://tts.sg.qlikcloud.com/resources/assets/external/requirejs/require.js\"></script>\n  <link rel=\"stylesheet\" href=\"https://tts.sg.qlikcloud.com/resources/autogenerated/qlik-styles.css\">\n\n<script>\n//Qlik Sense SaaSのテナント情報\nvar server = {\n  host: \"tts.sg.qlikcloud.com\", // Qlik Sense SaaS tenant\n  port: 443,                    // Qlik Sense SaaS port\n  prefix: \"/\",                  // Virtual Proxy prefix\n  isSecure: true,               // true=https, false=http\n  webIntegrationId: 'TnClSNKbs_QqoZa31Qwy1qD5U1CotVfF', // Web ID\n  jwt: '{jwttoken}'             // JWT\n};\n\n//認証済みかのチェック\nfunction connect() {\n  var tenant = \"https://\"+server.host+(server.port ? \":\"+server.port : \"\");\n  //ログイン状態チェック用API: https://[tenant]/api/v1/users/me\n  fetch(tenant + \"/api/v1/users/me\", {\n    method: \"GET\",\n    mode: \"cors\",           // no-cors, cors, same-origin\n    credentials: \"include\", // include, same-origin, omit\n    headers: {\n      \"qlik-web-integration-id\": server.webIntegrationId\n    }\n  }).then(response => {\n    //未認証の場合はJWTで認証\n    if(response.status===401) {\n      fetch(tenant + \"/login/jwt-session\", {\n        method: 'POST',\n        mode: 'cors',\n        credentials: 'include',\n        headers: {\n          'qlik-web-integration-id': server.webIntegrationId,\n          'Authorization':'Bearer '+server.jwt\n        },\n      }).then((response) => {\n        if(response.status !== 200) {\n          alert('Failed to login via JWT');\n        }\n        else {\n          start();\n        }\n      });\n    }\n    else {\n      start();\n    }\n  }).catch(error => {\n    alert(error);\n  });\n}\nconnect(); //認証済みかのチェック\n\nfunction start() {\nrequire.config({\n  // https://tts.sg.qlikcloud.com/resources\n  baseUrl: \"https://\" + server.host + (server.port ? \":\" + server.port : \"\") + server.prefix + \"resources\",\n  webIntegrationId: server.webIntegrationId\n});\nrequire([\"js/qlik\"], function(qlik) {\n  qlik.setLanguage('ja-JP');                           // 表示言語\n  qlik.theme.apply('breeze');                          // Theme ID\n  var app_id = '72a3da4b-1093-4c4c-840d-1ee44fbcbb91'; // App ID\n  var app = qlik.openApp(app_id, server);\n  app.getObject('QV01', 'CurrentSelections'); // 選択バー\n  app.getObject('QV02', 'BDQru');             // フィルターパネル\n  app.getObject('QV03', 'CzcvAzC');           // フィルターパネル\n  app.getObject('QV04', 'pmGDmg');            // 棒チャート\n\n  window.onbeforeunload = function() {\n    app.close();\n  }\n});\n}\n</script>\n\n</head>\n\n<body>\n\n<table border=\"1\" width=\"100%\" height=\"100%\">\n  <tbody>\n    <tr>\n      <td colspan=\"3\" width=\"100%\" height=\"10%\"><div id=\"QV01\" style=\"width:100%;height:100%;\"></div></td>\n    </tr>\n    <tr>\n      <td width=\"30%\" height=\"45%\"><div id=\"QV02\" style=\"width:100%;height:100%;\"></div></td>\n      <td colspan=\"2\" rowspan=\"2\" width=\"70%\" height=\"80%\"><div id=\"QV04\" style=\"width:100%;height:100%;\"></div></td>\n    </tr>\n    <tr>\n      <td width=\"30%\" height=\"45%\"><div id=\"QV03\" style=\"width:100%;height:100%;\"></div></td>\n    </tr>\n  </tbody>\n</table>\n\n<script>\n</script>\n\n</body>\n</html>";
    
    public String getJWT() throws IOException, NoSuchAlgorithmException, InvalidKeySpecException {
      // convert PKCS#1 file(BEGIN/END RSA PRIVATE KEY) to PKCS#8 file with DER format(Java can read it)
      // $>openssl pkcs8 -topk8 -inform PEM -outform DER -in privatekey.pem -out privatekey.der -nocrypt
      byte[] encoded_privateKey = Files.readAllBytes(Paths.get("c:\\temp\\privatekey.der"));
      KeyFactory keyFactory = KeyFactory.getInstance("RSA");
      RSAPrivateKey privateKey = (RSAPrivateKey)keyFactory.generatePrivate(new PKCS8EncodedKeySpec(encoded_privateKey));
      // generate public key with DER format(Java can read it) from private key(PEM format)
      // $>openssl rsa -in privatekey.pem -pubout -outform DER -out publickey.der
      byte[] encoded_publicKey = Files.readAllBytes(Paths.get("c:\\temp\\publickey.der"));
      RSAPublicKey publickey = (RSAPublicKey)keyFactory.generatePublic(new X509EncodedKeySpec(encoded_publicKey));
      Algorithm algorithm = Algorithm.RSA256(publickey, privateKey);
  
      // kid and iss have to match with the IDP config and the audience has to be qlik.api/login/jwt-session
      Map<String, Object> header = new HashMap<>();
      header.put("kid", "my-custom-jwt");
      Date iat = new Date();
      Date exp = new Date();
      exp.setTime(iat.getTime() + 3600000L); //Expires 3600 seconds after the issue date/time.
      return JWT.create()
        .withHeader(header)
        .withJWTId(UUID.randomUUID().toString())
        .withIssuer("https://my-custom-jwt")
        .withIssuedAt(iat)
        .withExpiresAt(exp)
        .withNotBefore(iat) //JWT is valid 0 second after the issue date/time.
        .withSubject("0hEhiPyhMBdtOCv2UZKoLo4G24p-7R6eeGdZUQHF0-c")
        .withClaim("subType", "user")
        .withClaim("name", "Hardcore Harry")
        .withClaim("email", "harry@example.com")
        .withClaim("email_verified", true)
        .withClaim("groups", Arrays.asList("Administrators", "Sales", "Marketing"))
        .withClaim("aud", "qlik.api/login/jwt-session")
        .sign(algorithm);
    }

    @Override
    public void handle(HttpExchange t) throws IOException {
      String jwttoken = "";
      try {
        jwttoken = getJWT();
      } catch (Exception e) {
        e.printStackTrace();
      }
      String html = template.replace("{jwttoken}", jwttoken);
      byte[] htmldata = html.getBytes(StandardCharsets.UTF_8);
      t.sendResponseHeaders(200, htmldata.length);
      OutputStream os = t.getResponseBody();
      os.write(htmldata);
      os.flush();
      os.close();
    }
  }
  
  public static void main(String[] args) throws Exception {
    HttpServer server = HttpServer.create(new InetSocketAddress(80), 0);
    server.createContext("/", new MyHandler());
    server.setExecutor(null);
    server.start();
  }
}
